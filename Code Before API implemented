#Stock Data Visualizer
#scrum-team-1

#REQUIREMENTS
#1. Ask the user to enter the stock symbol for the company they want data for.
#2. Ask the user for the chart type they would like.
#3. Ask the user for the time series function they want the api to use.
#4. Ask the user for the beginning date in YYYY-MM-DD format.
#5. Ask the user for the end date in YYYY-MM-DD format.
    # - The end date should not be before the begin date
#6. Generate a graph and open in the user’s default browser.

from datetime import datetime
import requests

print('Stock Data Visualizer')
print('-------------------------')

#2. Ask the user for the chart type they would like.
def askCharts():
    print('\nChart Types:')
    print('------------------')
    print('1. Bar')
    print('2. Line') 

    while(True):
        try:
            chartType = int(input('\nEnter the chart type you want(1, 2): '))
            if chartType == 1:
                print('chartType == 1:')
            elif chartType == 2:
                print('chartType == 2:')
            elif chartType not in range(1,3): #if user any number other than 1-3
                print("ERROR: Invalid Option! Select 1 or 2")
                continue
        except ValueError: #if user anything other than 1-3
            print("ERROR: Invalid Option! Select 1 or 2")
            continue
        else:
            break
    

#3. Ask the user for the time series function they want the api to use.
def askTimeSeries(stockSymbol):
    stock = stockSymbol
    print('\nSelect the Time Series of the chart you want to generate:')
    print('----------------------------------------------------------------')
    print('1. Intraday')
    print('2. Daily')
    print('3. Weekly')
    print('4. Monthly')
    
    while(True):
        try:
            timeSeries = int(input('\nEnter  time series option (1, 2, 3, 4): '))
            apiKey = 'YY5C93IGQ19VMJXQ'
            if timeSeries == 1:
                #enter intraday request
                url = 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=' + stock + '&interval=60min&apikey=' + apiKey
            elif timeSeries == 2:
                #enter daily request
                url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=' + stock + '&apikey=' + apiKey
            elif timeSeries == 3:
                #enter weekly request
                url = 'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=' + stock + '&apikey=' + apiKey
            elif timeSeries == 4:
                #enter monthly requred
                url = 'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=' + stock + '&apikey=' + apiKey
            elif timeSeries not in range(1,5): #if user anything other than 1-4
                print("ERROR: Invalid Option! Select 1 or 2 or 3 or 4")
                continue
        except ValueError: #if user anything other than 1-4
            print("ERROR: Invalid Option! Select 1 or 2 or 3 or 4")
            continue
        else:
            break
    r = requests.get(url)
    data = r.json()
    return data

#4. Ask the user for the beginning date in YYYY-MM-DD format.
#5. Ask the user for the end date in YYYY-MM-DD format.
    # The end date should not be before the begin date
# https://www.geeksforgeeks.org/comparing-dates-python/
# https://www.geeksforgeeks.org/python-validate-string-date-format/
def checkDates():
    format = "%Y-%m-%d"
    while(True):
        try:
            startDate = input('\nEnter the start date (format: YYYY-MM-DD): ')
            endDate = input('\nEnter the end date (format: YYYY-MM-DD): ')
            datetime.strptime(startDate, format)
            datetime.strptime(endDate, format)
            if endDate < startDate:
                print("End date must be after start date")
                continue
            break
        except ValueError as e:
            print("Incorrect start date format, should be YYYY-MM-DD")
            continue
        else:
            break

#7. Generate a graph and open in the user’s default browser.
#def generateGraph(stockSymbol, chartType, timeSeries, startDate, endDate):



def main():
    repeat = True
    while(repeat):
        while(True):
            try:
                #1. Ask the user to enter the stock symbol for the company they want data for.
                stockSymbol = input('\nEnter stock symbol: ')
                askCharts()
                askTimeSeries(stockSymbol)
                checkDates()
                #generateGraph()
            except ValueError:
                print("ERROR: Invalid Option!")
                continue
            else:
                 break
        more_stocks = input("Would you like to view more stock data? (y/n): ")
        if (more_stocks != "y"):
            repeat = False
        
main()
